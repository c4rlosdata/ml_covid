{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/c4rlosdata/ml_covid/blob/main/main.ipnyb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#pip install pycaret\n",
        "#!pip install mlflow\n",
        "!pip install mlflow==2.4.1\n",
        "#!pip install --upgrade mlflow"
      ],
      "metadata": {
        "id": "Vz07KZMZ5rIm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f9fb184b-d1e2-4880-cef9-6a3a2b54657c",
        "collapsed": true
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[33mWARNING: Ignoring invalid distribution -lflow (/usr/local/lib/python3.10/dist-packages)\u001b[0m\u001b[33m\n",
            "\u001b[0mRequirement already satisfied: mlflow==2.4.1 in /usr/local/lib/python3.10/dist-packages (2.4.1)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (8.1.7)\n",
            "Requirement already satisfied: cloudpickle<3 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (2.2.1)\n",
            "Requirement already satisfied: databricks-cli<1,>=0.8.7 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (0.18.0)\n",
            "Requirement already satisfied: entrypoints<1 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (0.4)\n",
            "Requirement already satisfied: gitpython<4,>=2.1.0 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (3.1.43)\n",
            "Requirement already satisfied: pyyaml<7,>=5.1 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (6.0.2)\n",
            "Requirement already satisfied: protobuf<5,>=3.12.0 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (4.25.5)\n",
            "Requirement already satisfied: pytz<2024 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (2023.4)\n",
            "Requirement already satisfied: requests<3,>=2.17.3 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (2.32.3)\n",
            "Requirement already satisfied: packaging<24 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (23.2)\n",
            "Requirement already satisfied: importlib-metadata!=4.7.0,<7,>=3.7.0 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (6.11.0)\n",
            "Requirement already satisfied: sqlparse<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (0.5.2)\n",
            "Requirement already satisfied: alembic!=1.10.0,<2 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (1.14.0)\n",
            "Requirement already satisfied: docker<7,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (6.1.3)\n",
            "Requirement already satisfied: Flask<3 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (2.3.3)\n",
            "Requirement already satisfied: numpy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (1.26.4)\n",
            "Requirement already satisfied: scipy<2 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (1.11.4)\n",
            "Requirement already satisfied: pandas<3 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (2.1.4)\n",
            "Requirement already satisfied: querystring-parser<2 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (1.2.4)\n",
            "Requirement already satisfied: sqlalchemy<3,>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (2.0.36)\n",
            "Requirement already satisfied: scikit-learn<2 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (1.4.2)\n",
            "Requirement already satisfied: pyarrow<13,>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (12.0.1)\n",
            "Requirement already satisfied: markdown<4,>=3.3 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (3.7)\n",
            "Requirement already satisfied: matplotlib<4 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (3.7.5)\n",
            "Requirement already satisfied: gunicorn<21 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (20.1.0)\n",
            "Requirement already satisfied: Jinja2<4,>=2.11 in /usr/local/lib/python3.10/dist-packages (from mlflow==2.4.1) (3.1.4)\n",
            "Requirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow==2.4.1) (1.3.6)\n",
            "Requirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic!=1.10.0,<2->mlflow==2.4.1) (4.12.2)\n",
            "Requirement already satisfied: pyjwt>=1.7.0 in /usr/local/lib/python3.10/dist-packages (from databricks-cli<1,>=0.8.7->mlflow==2.4.1) (2.10.0)\n",
            "Requirement already satisfied: oauthlib>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from databricks-cli<1,>=0.8.7->mlflow==2.4.1) (3.2.2)\n",
            "Requirement already satisfied: tabulate>=0.7.7 in /usr/local/lib/python3.10/dist-packages (from databricks-cli<1,>=0.8.7->mlflow==2.4.1) (0.9.0)\n",
            "Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.10/dist-packages (from databricks-cli<1,>=0.8.7->mlflow==2.4.1) (1.16.0)\n",
            "Requirement already satisfied: urllib3<3,>=1.26.7 in /usr/local/lib/python3.10/dist-packages (from databricks-cli<1,>=0.8.7->mlflow==2.4.1) (2.2.3)\n",
            "Requirement already satisfied: websocket-client>=0.32.0 in /usr/local/lib/python3.10/dist-packages (from docker<7,>=4.0.0->mlflow==2.4.1) (1.8.0)\n",
            "Requirement already satisfied: Werkzeug>=2.3.7 in /usr/local/lib/python3.10/dist-packages (from Flask<3->mlflow==2.4.1) (3.0.6)\n",
            "Requirement already satisfied: itsdangerous>=2.1.2 in /usr/local/lib/python3.10/dist-packages (from Flask<3->mlflow==2.4.1) (2.2.0)\n",
            "Requirement already satisfied: blinker>=1.6.2 in /usr/local/lib/python3.10/dist-packages (from Flask<3->mlflow==2.4.1) (1.9.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from gitpython<4,>=2.1.0->mlflow==2.4.1) (4.0.11)\n",
            "Requirement already satisfied: setuptools>=3.0 in /usr/local/lib/python3.10/dist-packages (from gunicorn<21->mlflow==2.4.1) (75.1.0)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.10/dist-packages (from importlib-metadata!=4.7.0,<7,>=3.7.0->mlflow==2.4.1) (3.21.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2<4,>=2.11->mlflow==2.4.1) (3.0.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow==2.4.1) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow==2.4.1) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow==2.4.1) (4.55.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow==2.4.1) (1.4.7)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow==2.4.1) (11.0.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow==2.4.1) (3.2.0)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib<4->mlflow==2.4.1) (2.8.2)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3->mlflow==2.4.1) (2024.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow==2.4.1) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow==2.4.1) (3.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.17.3->mlflow==2.4.1) (2024.8.30)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow==2.4.1) (1.3.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn<2->mlflow==2.4.1) (3.5.0)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy<3,>=1.4.0->mlflow==2.4.1) (3.1.1)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from gitdb<5,>=4.0.1->gitpython<4,>=2.1.0->mlflow==2.4.1) (5.0.1)\n",
            "\u001b[33mWARNING: Ignoring invalid distribution -lflow (/usr/local/lib/python3.10/dist-packages)\u001b[0m\u001b[33m\n",
            "\u001b[0m"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "id": "tJ8HpWhipR6i"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import FunctionTransformer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from pycaret.classification import setup\n",
        "from pycaret.classification import compare_models\n",
        "from pycaret.classification import create_model\n",
        "from pycaret.classification import predict_model\n",
        "from pycaret.classification import plot_model, evaluate_model"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('https://raw.githubusercontent.com/alvaroriz/datascience_datasets/refs/heads/main/iccmh2020rccsm_p.csv')"
      ],
      "metadata": {
        "id": "klZBFv5Opz0u"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# @title\n",
        "# Utilizei a classe DataFrameAnalyzer disponibilizada em aula para fazer uma a\n",
        "# análise inicial do dataframe.\n",
        "from pandas.api.types import is_numeric_dtype\n",
        "\n",
        "class DataFrameAnalyzer:\n",
        "    def __init__(self, df):\n",
        "        \"\"\"\n",
        "        Inicializa a classe com o DataFrame fornecido.\n",
        "\n",
        "        Args:\n",
        "          df: DataFrame de entrada.\n",
        "        \"\"\"\n",
        "        self.df = df\n",
        "\n",
        "    def variaveis_constantes(self):\n",
        "        \"\"\"\n",
        "        Identifica variáveis constantes no DataFrame.\n",
        "\n",
        "        Returns:\n",
        "          Lista de nomes de colunas com valores constantes.\n",
        "        \"\"\"\n",
        "        variaveis_constantes = []\n",
        "        for col in self.df.columns:\n",
        "            if self.df[col].nunique() <= 1:\n",
        "                variaveis_constantes.append(col)\n",
        "        return variaveis_constantes\n",
        "\n",
        "    def variaveis_alta_cardinalidade(self, limiar=0.8):\n",
        "        \"\"\"\n",
        "        Identifica variáveis com alta cardinalidade no DataFrame.\n",
        "\n",
        "        Args:\n",
        "          limiar: Limiar para alta cardinalidade (padrão 0.8).\n",
        "\n",
        "        Returns:\n",
        "          Lista de nomes de colunas com alta cardinalidade.\n",
        "        \"\"\"\n",
        "        variaveis_alta_cardinalidade = []\n",
        "        for col in self.df.columns:\n",
        "            if self.df[col].nunique() / len(self.df) >= limiar:\n",
        "                variaveis_alta_cardinalidade.append(col)\n",
        "        return variaveis_alta_cardinalidade\n",
        "\n",
        "    def variaveis_alta_correlacao(self, threshold=0.9):\n",
        "        \"\"\"\n",
        "        Identifica pares de variáveis numéricas que possuem alta correlação.\n",
        "\n",
        "        Args:\n",
        "          threshold: Limiar para considerar alta correlação (padrão 0.9).\n",
        "\n",
        "        Returns:\n",
        "          Lista de tuplas com pares de variáveis altamente correlacionadas.\n",
        "        \"\"\"\n",
        "        correlacao = self.df.select_dtypes(include=[np.number]).corr()\n",
        "        pares_correlacionados = []\n",
        "\n",
        "        for i in range(len(correlacao.columns)):\n",
        "            for j in range(i):\n",
        "                if abs(correlacao.iloc[i, j]) > threshold:\n",
        "                    colname1 = correlacao.columns[i]\n",
        "                    colname2 = correlacao.columns[j]\n",
        "                    pares_correlacionados.append((colname1, colname2))\n",
        "\n",
        "        return pares_correlacionados\n",
        "\n",
        "    def variaveis_valores_ausentes(self):\n",
        "        \"\"\"\n",
        "        Identifica variáveis com valores ausentes no DataFrame.\n",
        "\n",
        "        Returns:\n",
        "          Dicionário com nomes de colunas e a porcentagem de valores ausentes.\n",
        "        \"\"\"\n",
        "        valores_ausentes = self.df.isnull().sum()\n",
        "        percentuais_ausentes = (valores_ausentes / len(self.df)) * 100\n",
        "        variaveis_ausentes = percentuais_ausentes[percentuais_ausentes > 0].sort_values(ascending=False)\n",
        "\n",
        "        return variaveis_ausentes.to_dict()\n",
        "\n",
        "    def linhas_duplicadas(self):\n",
        "        \"\"\"\n",
        "        Identifica linhas duplicadas no DataFrame.\n",
        "\n",
        "        Returns:\n",
        "          Número de linhas duplicadas.\n",
        "        \"\"\"\n",
        "        return self.df.duplicated().sum()\n",
        "\n",
        "    def variaveis_variancia_zero(self):\n",
        "        \"\"\"\n",
        "        Identifica variáveis com variância zero no DataFrame.\n",
        "\n",
        "        Returns:\n",
        "          Lista de nomes de colunas com variância zero.\n",
        "        \"\"\"\n",
        "        variaveis_variancia_zero = []\n",
        "        for col in self.df.select_dtypes(include=[np.number]).columns:\n",
        "            if self.df[col].var() == 0:\n",
        "                variaveis_variancia_zero.append(col)\n",
        "        return variaveis_variancia_zero\n",
        "\n",
        "    def alta_quantidade_valores_ausentes(self, threshold=50):\n",
        "        \"\"\"\n",
        "        Identifica variáveis com alta quantidade de valores ausentes no DataFrame.\n",
        "\n",
        "        Args:\n",
        "          threshold: Limiar para considerar alta quantidade de valores ausentes (padrão 50%).\n",
        "\n",
        "        Returns:\n",
        "          Lista de nomes de colunas com alta quantidade de valores ausentes.\n",
        "        \"\"\"\n",
        "        valores_ausentes = self.df.isnull().sum() / len(self.df) * 100\n",
        "        return valores_ausentes[valores_ausentes > threshold].index.tolist()\n",
        "\n",
        "    def variaveis_assimetria(self):\n",
        "        \"\"\"\n",
        "        Identifica variáveis numéricas com alta assimetria (skewness) no DataFrame.\n",
        "\n",
        "        Returns:\n",
        "          Dicionário com nomes de colunas e seus respectivos valores de skewness.\n",
        "        \"\"\"\n",
        "        skewness = self.df.select_dtypes(include=[np.number]).apply(lambda x: x.skew()).dropna()\n",
        "        skewness = skewness[abs(skewness) > 1]  # Considerando alta assimetria se skewness > 1 ou < -1\n",
        "        return skewness.to_dict()\n",
        "\n",
        "    def variaveis_mono(self):\n",
        "        \"\"\"\n",
        "        Identifica variáveis monotônicas no DataFrame.\n",
        "\n",
        "        Returns:\n",
        "          Lista de nomes de colunas monotônicas.\n",
        "        \"\"\"\n",
        "        monotonic_cols = []\n",
        "        for col in self.df.select_dtypes(include=[np.number]).columns:\n",
        "            if self.df[col].is_monotonic_increasing or self.df[col].is_monotonic_decreasing:\n",
        "                monotonic_cols.append(col)\n",
        "        return monotonic_cols\n",
        "\n",
        "    def variaveis_rejeitadas(self):\n",
        "        \"\"\"\n",
        "        Identifica variáveis rejeitadas no DataFrame, como constantes ou com alta quantidade de valores ausentes.\n",
        "\n",
        "        Returns:\n",
        "          Lista de nomes de colunas rejeitadas.\n",
        "        \"\"\"\n",
        "        rejeitadas = self.variaveis_constantes()\n",
        "        rejeitadas += self.alta_quantidade_valores_ausentes()\n",
        "        return rejeitadas\n",
        "\n",
        "    def alta_quantidade_infinidades(self):\n",
        "        \"\"\"\n",
        "        Identifica variáveis com alta quantidade de valores infinitos no DataFrame.\n",
        "\n",
        "        Returns:\n",
        "          Dicionário com nomes de colunas e a quantidade de valores infinitos.\n",
        "        \"\"\"\n",
        "        infinitos = self.df.replace([np.inf, -np.inf], np.nan)\n",
        "        num_infinities = infinitos.isnull().sum() - self.df.isnull().sum()\n",
        "        return num_infinities[num_infinities > 0].to_dict()\n",
        "\n",
        "    def clusters_alta_correlacao(self, threshold=0.9):\n",
        "        \"\"\"\n",
        "        Identifica agrupamentos de variáveis numéricas com alta correlação no DataFrame.\n",
        "\n",
        "        Args:\n",
        "          threshold: Limiar para considerar alta correlação (padrão 0.9).\n",
        "\n",
        "        Returns:\n",
        "          Lista de listas de variáveis que estão altamente correlacionadas entre si.\n",
        "        \"\"\"\n",
        "        correlacao = self.df.select_dtypes(include=[np.number]).corr()\n",
        "        clusters = []\n",
        "        visited = set()\n",
        "\n",
        "        for i in range(len(correlacao.columns)):\n",
        "            cluster = []\n",
        "            for j in range(i):\n",
        "                if abs(correlacao.iloc[i, j]) > threshold:\n",
        "                    colname1 = correlacao.columns[i]\n",
        "                    colname2 = correlacao.columns[j]\n",
        "                    if colname1 not in visited and colname2 not in visited:\n",
        "                        cluster.extend([colname1, colname2])\n",
        "                        visited.update([colname1, colname2])\n",
        "            if cluster:\n",
        "                clusters.append(cluster)\n",
        "\n",
        "        return clusters\n",
        "\n",
        "    def resumo_dataset(self):\n",
        "        \"\"\"\n",
        "        Gera um resumo das características do DataFrame.\n",
        "\n",
        "        Returns:\n",
        "          Dicionário com informações sobre o DataFrame.\n",
        "        \"\"\"\n",
        "        num_linhas = self.df.shape[0]\n",
        "        num_colunas = self.df.shape[1]\n",
        "        variaveis_numericas = [coluna for coluna in self.df.columns if is_numeric_dtype(self.df[coluna])]\n",
        "\n",
        "        return {\n",
        "            'Número de linhas': num_linhas,\n",
        "            'Número de colunas': num_colunas,\n",
        "            'Variáveis numéricas': variaveis_numericas,\n",
        "            'Alertas': '-' * 50,\n",
        "            'Variáveis com valores constantes': self.variaveis_constantes(),\n",
        "            'Variáveis com alta cardinalidade': self.variaveis_alta_cardinalidade(),\n",
        "            'Pares de variáveis com alta correlação': self.variaveis_alta_correlacao(),\n",
        "            'Variáveis com valores ausentes': self.variaveis_valores_ausentes(),\n",
        "            'Linhas duplicadas': self.linhas_duplicadas(),\n",
        "            'Variáveis com variância zero': self.variaveis_variancia_zero(),\n",
        "            'Variáveis com alta quantidade de valores ausentes': self.alta_quantidade_valores_ausentes(),\n",
        "            'Variáveis com alta assimetria (skewness)': self.variaveis_assimetria(),\n",
        "            'Variáveis monotônicas': self.variaveis_mono(),\n",
        "            'Variáveis rejeitadas': self.variaveis_rejeitadas(),\n",
        "            'Variáveis com alta quantidade de valores infinitos': self.alta_quantidade_infinidades(),\n",
        "            'Agrupamentos de alta correlação': self.clusters_alta_correlacao()\n",
        "        }\n",
        "\n",
        "analyzer = DataFrameAnalyzer(df)\n",
        "resumo = analyzer.resumo_dataset()\n",
        "for key, value in resumo.items():\n",
        "    print(f'{key}  {value}')"
      ],
      "metadata": {
        "id": "rCBT4ve5vxqP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "cellView": "form",
        "outputId": "39b858cd-ac79-443b-f4d2-bf4baca0b2f5"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Número de linhas  45989\n",
            "Número de colunas  43\n",
            "Variáveis numéricas  ['PUMFID', 'MH_05', 'MH_10', 'MH_15A', 'MH_15B', 'MH_15C', 'MH_15D', 'MH_15E', 'MH_15F', 'MH_15G', 'MH_20', 'BH_60A', 'BH_60B', 'BH_60C', 'BH_55A', 'BH_55B', 'BH_55C', 'BH_55D', 'BH_55E', 'BH_55F', 'BH_55G', 'BH_55H', 'BH_55I', 'BH_55J', 'BH_55K', 'DEM_10', 'MHDVMHI', 'ANXDVGAD', 'ANXDVGAC', 'ANXDVSEV', 'AGEGR_10', 'PBH_55L', 'PCSIZMIZ', 'PIIDFLAG', 'PIMMST', 'PLM_30', 'PLM_40', 'PPROV', 'PRURURB', 'PVISMIN', 'PAGEGR', 'PUMFFACT']\n",
            "Alertas  --------------------------------------------------\n",
            "Variáveis com valores constantes  ['VERDATE']\n",
            "Variáveis com alta cardinalidade  ['PUMFID']\n",
            "Pares de variáveis com alta correlação  [('MHDVMHI', 'MH_05'), ('PAGEGR', 'AGEGR_10')]\n",
            "Variáveis com valores ausentes  {}\n",
            "Linhas duplicadas  0\n",
            "Variáveis com variância zero  []\n",
            "Variáveis com alta quantidade de valores ausentes  []\n",
            "Variáveis com alta assimetria (skewness)  {'MH_15A': 1.1212575769079052, 'MH_15B': 1.8391878235532273, 'MH_15C': 1.6162941195525622, 'MH_15D': 1.367360875227237, 'MH_15E': 2.2109174077424383, 'MH_15F': 1.2344268587508775, 'MH_15G': 1.7364453905425332, 'BH_60A': 1.823865269198416, 'BH_60B': 2.5881802520514134, 'BH_60C': 1.6992720675331558, 'BH_55A': 1.0116586121218218, 'BH_55B': 1.5463857042185967, 'BH_55G': 1.0126592699418588, 'BH_55I': 1.2764896433639055, 'BH_55K': 1.075536701894741, 'DEM_10': -1.1545038693183722, 'ANXDVGAD': 5.9133408008333275, 'ANXDVGAC': 5.601603883694738, 'ANXDVSEV': 1.644761384135187, 'PBH_55L': 10.863014519262972, 'PCSIZMIZ': 1.3233880383800076, 'PIIDFLAG': 14.345648557788337, 'PIMMST': 9.051526990667819, 'PLM_30': 17.63226906175276, 'PRURURB': 6.687957060857573, 'PVISMIN': 7.322884721378279, 'PUMFFACT': 2.305411312294106}\n",
            "Variáveis monotônicas  ['PUMFID']\n",
            "Variáveis rejeitadas  ['VERDATE']\n",
            "Variáveis com alta quantidade de valores infinitos  {}\n",
            "Agrupamentos de alta correlação  [['MHDVMHI', 'MH_05'], ['PAGEGR', 'AGEGR_10']]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "columns_to_check = df.drop(columns=['PLM_30', 'ANXDVGAD'])\n",
        "columns99 = df[['PLM_30', 'ANXDVGAD']]\n",
        "df_antes = df.shape[0]\n",
        "\n",
        "df = df[~(columns_to_check == 9).any(axis=1)]\n",
        "print(df.shape)\n",
        "\n",
        "df = df[~(columns99 == 99).any(axis=1)]\n",
        "print(df.shape)\n",
        "\n",
        "print(\"Porcentagem perdida: \", round((1 - (df.shape[0]/df_antes)) * 100, 2), '%')"
      ],
      "metadata": {
        "id": "EsvRrzE-jDRd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6adf4ec7-ab5e-4d70-be92-c9bf835a6de0"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(39795, 43)\n",
            "(39730, 43)\n",
            "Porcentagem perdida:  13.61 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#for column in df_new.columns:\n",
        "#    print(f\"Coluna {column}: {df_new[column].unique()}\")"
      ],
      "metadata": {
        "id": "SWKOHk6W1SWi"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#df = df.drop(['PUMFID', 'VERDATE'], axis=1)\n",
        "\n",
        "df = df.drop(['PUMFID', 'VERDATE', 'PBH_55L', 'PIIDFLAG', 'PIMMST', 'PRURURB', 'BH_60B', 'BH_60A'], axis=1)\n",
        "df.nunique()"
      ],
      "metadata": {
        "id": "AeXuquqUwARG",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "64532301-d20a-4a77-eeed-832c134a487c"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MH_05         5\n",
              "MH_10         5\n",
              "MH_15A        4\n",
              "MH_15B        4\n",
              "MH_15C        4\n",
              "MH_15D        4\n",
              "MH_15E        4\n",
              "MH_15F        4\n",
              "MH_15G        4\n",
              "MH_20         5\n",
              "BH_60C        4\n",
              "BH_55A        4\n",
              "BH_55B        4\n",
              "BH_55C        4\n",
              "BH_55D        4\n",
              "BH_55E        4\n",
              "BH_55F        4\n",
              "BH_55G        4\n",
              "BH_55H        4\n",
              "BH_55I        4\n",
              "BH_55J        4\n",
              "BH_55K        4\n",
              "DEM_10        2\n",
              "MHDVMHI       5\n",
              "ANXDVGAD     22\n",
              "ANXDVGAC      2\n",
              "ANXDVSEV      5\n",
              "AGEGR_10      6\n",
              "PCSIZMIZ      5\n",
              "PLM_30        6\n",
              "PLM_40        5\n",
              "PPROV        10\n",
              "PVISMIN       2\n",
              "PAGEGR        9\n",
              "PUMFFACT    135\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>MH_05</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MH_10</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MH_15A</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MH_15B</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MH_15C</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MH_15D</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MH_15E</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MH_15F</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MH_15G</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MH_20</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BH_60C</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BH_55A</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BH_55B</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BH_55C</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BH_55D</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BH_55E</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BH_55F</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BH_55G</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BH_55H</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BH_55I</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BH_55J</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BH_55K</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>DEM_10</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MHDVMHI</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ANXDVGAD</th>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ANXDVGAC</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ANXDVSEV</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AGEGR_10</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PCSIZMIZ</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PLM_30</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PLM_40</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PPROV</th>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PVISMIN</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PAGEGR</th>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PUMFFACT</th>\n",
              "      <td>135</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"percentual_por_coluna = {}\n",
        "for col in df.columns:\n",
        "    percentual_por_coluna[col] = df[col].value_counts(normalize=True) * 100\n",
        "\n",
        "percentual_por_coluna_df = pd.DataFrame(percentual_por_coluna)\n",
        "print(percentual_por_coluna_df)\"\"\"\n",
        "\n",
        "for col in df.columns:\n",
        "    print(f\"Porcentagens para a coluna {col}:\")\n",
        "    print(df[col].value_counts(normalize=True) * 100)\n",
        "    print(\"-\" * 30)"
      ],
      "metadata": {
        "id": "CARe9zUgtpvZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c179b5a3-0879-454f-bdc6-72742fe2d5eb"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Porcentagens para a coluna MH_05:\n",
            "MH_05\n",
            "3    33.853511\n",
            "2    29.471432\n",
            "4    21.102441\n",
            "1     9.753335\n",
            "5     5.819280\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna MH_10:\n",
            "MH_10\n",
            "4    47.978857\n",
            "3    32.876919\n",
            "5    10.375031\n",
            "2     6.868865\n",
            "1     1.900327\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna MH_15A:\n",
            "MH_15A\n",
            "2    44.955953\n",
            "1    22.622703\n",
            "3    16.775736\n",
            "4    15.645608\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna MH_15B:\n",
            "MH_15B\n",
            "1    42.277876\n",
            "2    35.036496\n",
            "3    12.698213\n",
            "4     9.987415\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna MH_15C:\n",
            "MH_15C\n",
            "2    40.357413\n",
            "1    32.552228\n",
            "3    14.918198\n",
            "4    12.172162\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna MH_15D:\n",
            "MH_15D\n",
            "2    39.058646\n",
            "1    29.612384\n",
            "3    16.604581\n",
            "4    14.724390\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna MH_15E:\n",
            "MH_15E\n",
            "1    51.067204\n",
            "2    29.647621\n",
            "3    11.547949\n",
            "4     7.737226\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna MH_15F:\n",
            "MH_15F\n",
            "2    41.958218\n",
            "1    24.193305\n",
            "3    18.829600\n",
            "4    15.018877\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna MH_15G:\n",
            "MH_15G\n",
            "1    43.778002\n",
            "2    34.475208\n",
            "3    11.588220\n",
            "4    10.158570\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna MH_20:\n",
            "MH_20\n",
            "3    42.811477\n",
            "4    27.618928\n",
            "2    20.168638\n",
            "5     5.416562\n",
            "1     3.984395\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna BH_60C:\n",
            "BH_60C\n",
            "4    58.897559\n",
            "3    39.187012\n",
            "2     1.570602\n",
            "1     0.344828\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna BH_55A:\n",
            "BH_55A\n",
            "2    56.843695\n",
            "1    18.112258\n",
            "3    16.934307\n",
            "4     8.109741\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna BH_55B:\n",
            "BH_55B\n",
            "2    42.146992\n",
            "3    25.859552\n",
            "1    16.169142\n",
            "4    15.824314\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna BH_55C:\n",
            "BH_55C\n",
            "3    40.062925\n",
            "4    35.919960\n",
            "2    20.971558\n",
            "1     3.045558\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna BH_55D:\n",
            "BH_55D\n",
            "2    45.441732\n",
            "3    39.816260\n",
            "4    10.382582\n",
            "1     4.359426\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna BH_55E:\n",
            "BH_55E\n",
            "2    42.509439\n",
            "3    37.616411\n",
            "4    13.566574\n",
            "1     6.307576\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna BH_55F:\n",
            "BH_55F\n",
            "3    39.519255\n",
            "2    33.971810\n",
            "4    21.741757\n",
            "1     4.767178\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna BH_55G:\n",
            "BH_55G\n",
            "2    44.661465\n",
            "1    26.614649\n",
            "3    19.758369\n",
            "4     8.965517\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna BH_55H:\n",
            "BH_55H\n",
            "2    43.375283\n",
            "3    24.424868\n",
            "1    22.610118\n",
            "4     9.589731\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna BH_55I:\n",
            "BH_55I\n",
            "2    47.201107\n",
            "3    25.431664\n",
            "1    19.159325\n",
            "4     8.207903\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna BH_55J:\n",
            "BH_55J\n",
            "2    41.625975\n",
            "3    25.731186\n",
            "1    22.932293\n",
            "4     9.710546\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna BH_55K:\n",
            "BH_55K\n",
            "2    39.841430\n",
            "1    27.467908\n",
            "3    21.452303\n",
            "4    11.238359\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna DEM_10:\n",
            "DEM_10\n",
            "2    75.001258\n",
            "1    24.998742\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna MHDVMHI:\n",
            "MHDVMHI\n",
            "2    33.853511\n",
            "3    29.471432\n",
            "1    21.102441\n",
            "4     9.753335\n",
            "0     5.819280\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna ANXDVGAD:\n",
            "ANXDVGAD\n",
            "0     8.643343\n",
            "3     7.863076\n",
            "7     7.737226\n",
            "4     7.674302\n",
            "5     7.465391\n",
            "6     7.306821\n",
            "2     7.208658\n",
            "1     5.909892\n",
            "8     5.446766\n",
            "9     4.731941\n",
            "10    4.087591\n",
            "11    3.682356\n",
            "12    3.332494\n",
            "13    3.027939\n",
            "14    3.005286\n",
            "15    2.363453\n",
            "21    2.094135\n",
            "16    2.041279\n",
            "17    1.922980\n",
            "18    1.766927\n",
            "19    1.512711\n",
            "20    1.175434\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna ANXDVGAC:\n",
            "ANXDVGAC\n",
            "2    69.987415\n",
            "1    30.012585\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna ANXDVSEV:\n",
            "ANXDVSEV\n",
            "2    32.688145\n",
            "1    28.655928\n",
            "3    17.135666\n",
            "4    12.876919\n",
            "0     8.643343\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna AGEGR_10:\n",
            "AGEGR_10\n",
            "3    29.353134\n",
            "2    23.911402\n",
            "4    21.198087\n",
            "6    10.850743\n",
            "5     9.131639\n",
            "1     5.554996\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna PCSIZMIZ:\n",
            "PCSIZMIZ\n",
            "2    31.160332\n",
            "1    27.417569\n",
            "3    21.042034\n",
            "5    11.351623\n",
            "4     9.028442\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna PLM_30:\n",
            "PLM_30\n",
            "5    32.889504\n",
            "6    27.269066\n",
            "4    18.316134\n",
            "3     9.524289\n",
            "2     7.221243\n",
            "1     4.779763\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna PLM_40:\n",
            "PLM_40\n",
            "4    46.667506\n",
            "3    20.241631\n",
            "2    14.966021\n",
            "1    10.045306\n",
            "5     8.079537\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna PPROV:\n",
            "PPROV\n",
            "35    48.560282\n",
            "59    14.485276\n",
            "24    12.391140\n",
            "48     8.668512\n",
            "12     6.758117\n",
            "46     2.997735\n",
            "47     2.514473\n",
            "13     2.086584\n",
            "10     1.185502\n",
            "11     0.352379\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna PVISMIN:\n",
            "PVISMIN\n",
            "2    90.148502\n",
            "1     9.851498\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna PAGEGR:\n",
            "PAGEGR\n",
            "4     15.650642\n",
            "3     13.742764\n",
            "5     13.702492\n",
            "6     11.369242\n",
            "10    10.850743\n",
            "2     10.168638\n",
            "7      9.828845\n",
            "8      9.131639\n",
            "1      5.554996\n",
            "Name: proportion, dtype: float64\n",
            "------------------------------\n",
            "Porcentagens para a coluna PUMFFACT:\n",
            "PUMFFACT\n",
            "0.3134    5.733702\n",
            "0.3340    4.981123\n",
            "0.3827    4.930783\n",
            "0.4165    3.944123\n",
            "1.1476    3.911402\n",
            "            ...   \n",
            "0.7479    0.067959\n",
            "3.0662    0.057891\n",
            "3.4396    0.055374\n",
            "2.1922    0.037755\n",
            "2.2127    0.035238\n",
            "Name: proportion, Length: 135, dtype: float64\n",
            "------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "base_treino = df.sample(frac=0.7, random_state=42)\n",
        "base_teste = df.drop(base_treino.index)\n",
        "#X = df.drop('ANXDVGAD', axis=1)\n",
        "#y = df['ANXDVGAD']\n",
        "\n",
        "#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "#print(X_train.shape)\n",
        "#print(X_test.shape)\n",
        "print('Base de Treinamento ', base_treino.shape)\n",
        "print('Base de Teste ', base_teste.shape)"
      ],
      "metadata": {
        "id": "0l7ZohTh2jhu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8d43c3f2-7d63-4678-945c-61a01acad1c5"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Base de Treinamento  (27811, 35)\n",
            "Base de Teste  (11919, 35)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.set_option(\"display.max_columns\", None)\n",
        "base_treino"
      ],
      "metadata": {
        "id": "rvqbDRvdhOI3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "outputId": "7204509c-2620-4896-9924-ab7b6d87229c"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       MH_05  MH_10  MH_15A  MH_15B  MH_15C  MH_15D  MH_15E  MH_15F  MH_15G  \\\n",
              "37635      2      3       2       1       2       2       1       2       1   \n",
              "30968      2      4       3       3       3       3       2       3       3   \n",
              "36629      2      4       2       3       3       2       2       2       2   \n",
              "8014       3      4       2       2       2       2       1       1       2   \n",
              "17266      2      5       4       4       4       4       4       4       2   \n",
              "...      ...    ...     ...     ...     ...     ...     ...     ...     ...   \n",
              "25599      3      4       2       1       2       3       1       3       2   \n",
              "36749      1      3       1       1       1       1       1       1       1   \n",
              "35001      3      4       3       3       3       3       1       3       2   \n",
              "10898      3      2       1       1       1       1       1       2       1   \n",
              "28262      3      4       4       4       4       4       3       1       3   \n",
              "\n",
              "       MH_20  BH_60C  BH_55A  BH_55B  BH_55C  BH_55D  BH_55E  BH_55F  BH_55G  \\\n",
              "37635      3       3       2       2       3       3       3       2       2   \n",
              "30968      4       3       2       2       3       3       3       3       2   \n",
              "36629      4       4       2       2       3       3       3       2       1   \n",
              "8014       3       4       2       2       2       2       3       2       1   \n",
              "17266      4       4       2       4       4       3       3       3       2   \n",
              "...      ...     ...     ...     ...     ...     ...     ...     ...     ...   \n",
              "25599      4       4       1       3       4       3       3       2       3   \n",
              "36749      1       3       2       2       3       1       1       3       1   \n",
              "35001      4       4       3       3       2       2       3       2       1   \n",
              "10898      3       4       4       4       4       4       4       4       4   \n",
              "28262      4       4       2       4       4       3       2       2       1   \n",
              "\n",
              "       BH_55H  BH_55I  BH_55J  BH_55K  DEM_10  MHDVMHI  ANXDVGAD  ANXDVGAC  \\\n",
              "37635       1       2       2       2       2        3         4         2   \n",
              "30968       2       2       2       2       2        3        13         1   \n",
              "36629       2       1       1       2       2        3         9         2   \n",
              "8014        2       2       1       1       1        2         5         2   \n",
              "17266       4       2       2       4       2        3        19         1   \n",
              "...       ...     ...     ...     ...     ...      ...       ...       ...   \n",
              "25599       2       2       2       2       2        2         7         2   \n",
              "36749       2       2       2       1       1        4         0         2   \n",
              "35001       1       1       1       2       2        2        11         1   \n",
              "10898       2       3       2       4       2        2         1         2   \n",
              "28262       1       2       2       1       2        2        16         1   \n",
              "\n",
              "       ANXDVSEV  AGEGR_10  PCSIZMIZ  PLM_30  PLM_40  PPROV  PVISMIN  PAGEGR  \\\n",
              "37635         1         4         2       4       3     35        2       7   \n",
              "30968         3         4         2       5       4     35        2       6   \n",
              "36629         2         4         3       5       4     35        2       6   \n",
              "8014          2         4         3       5       4     59        2       6   \n",
              "17266         4         3         3       6       2     35        2       4   \n",
              "...         ...       ...       ...     ...     ...    ...      ...     ...   \n",
              "25599         2         3         2       5       4     35        2       5   \n",
              "36749         0         5         2       1       4     35        2       8   \n",
              "35001         3         2         1       3       3     35        1       3   \n",
              "10898         1         5         1       3       3     59        2       8   \n",
              "28262         4         6         1       6       4     24        2      10   \n",
              "\n",
              "       PUMFFACT  \n",
              "37635    0.4688  \n",
              "30968    0.4165  \n",
              "36629    0.4165  \n",
              "8014     1.2667  \n",
              "17266    0.3134  \n",
              "...         ...  \n",
              "25599    0.3340  \n",
              "36749    1.6300  \n",
              "35001    0.3827  \n",
              "10898    0.6081  \n",
              "28262    4.0923  \n",
              "\n",
              "[27811 rows x 35 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-529dfbbd-424c-4e6f-8f41-1242d6838642\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MH_05</th>\n",
              "      <th>MH_10</th>\n",
              "      <th>MH_15A</th>\n",
              "      <th>MH_15B</th>\n",
              "      <th>MH_15C</th>\n",
              "      <th>MH_15D</th>\n",
              "      <th>MH_15E</th>\n",
              "      <th>MH_15F</th>\n",
              "      <th>MH_15G</th>\n",
              "      <th>MH_20</th>\n",
              "      <th>BH_60C</th>\n",
              "      <th>BH_55A</th>\n",
              "      <th>BH_55B</th>\n",
              "      <th>BH_55C</th>\n",
              "      <th>BH_55D</th>\n",
              "      <th>BH_55E</th>\n",
              "      <th>BH_55F</th>\n",
              "      <th>BH_55G</th>\n",
              "      <th>BH_55H</th>\n",
              "      <th>BH_55I</th>\n",
              "      <th>BH_55J</th>\n",
              "      <th>BH_55K</th>\n",
              "      <th>DEM_10</th>\n",
              "      <th>MHDVMHI</th>\n",
              "      <th>ANXDVGAD</th>\n",
              "      <th>ANXDVGAC</th>\n",
              "      <th>ANXDVSEV</th>\n",
              "      <th>AGEGR_10</th>\n",
              "      <th>PCSIZMIZ</th>\n",
              "      <th>PLM_30</th>\n",
              "      <th>PLM_40</th>\n",
              "      <th>PPROV</th>\n",
              "      <th>PVISMIN</th>\n",
              "      <th>PAGEGR</th>\n",
              "      <th>PUMFFACT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>37635</th>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>35</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>0.4688</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30968</th>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>35</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>0.4165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36629</th>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>35</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>0.4165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8014</th>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>59</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>1.2667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17266</th>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>19</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>2</td>\n",
              "      <td>35</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>0.3134</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25599</th>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>35</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>0.3340</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36749</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>35</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>1.6300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35001</th>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>35</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0.3827</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10898</th>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>59</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>0.6081</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28262</th>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>16</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>24</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>4.0923</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>27811 rows × 35 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-529dfbbd-424c-4e6f-8f41-1242d6838642')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-529dfbbd-424c-4e6f-8f41-1242d6838642 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-529dfbbd-424c-4e6f-8f41-1242d6838642');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2bc58ef7-93c6-427c-95e2-8e67064f3b10\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2bc58ef7-93c6-427c-95e2-8e67064f3b10')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2bc58ef7-93c6-427c-95e2-8e67064f3b10 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_640ffafa-fa03-4b2c-9360-785612e5c0da\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('base_treino')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_640ffafa-fa03-4b2c-9360-785612e5c0da button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('base_treino');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "base_treino"
            }
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(df.corr())"
      ],
      "metadata": {
        "id": "x6xbM-ngdNPD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 570
        },
        "outputId": "3514cce7-e172-4bcc-de40-7d3ac5813d99"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 50
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x550 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#categoricas = ['MH_05', 'MH_10', 'MH_15A', 'MH_15B', 'MH_15C', 'MH_15D', 'MH_15E', 'MH_15F', 'MH_15G', 'MH_20', 'BH_60A', 'BH_60B', 'BH_60C', 'BH_55A', 'BH_55B', 'BH_55C', 'BH_55D', 'BH_55E', 'BH_55F', 'BH_55G', 'BH_55H', 'BH_55I', 'BH_55J', 'BH_55K', 'DEM_10', 'MHDVMHI', 'ANXDVGAD', 'ANXDVSEV', 'AGEGR_10', 'PBH_55L', 'PCSIZMIZ', 'PIIDFLAG', 'PIMMST', 'PLM_30', 'PLM_40', 'PPROV', 'PRURURB', 'PVISMIN', 'PAGEGR']\n",
        "\n",
        "categoricas = ['MH_05', 'MH_10', 'MH_15A', 'MH_15B', 'MH_15C', 'MH_15D', 'MH_15E', 'MH_15F', 'MH_15G', 'MH_20', 'BH_60C', 'BH_55A', 'BH_55B', 'BH_55C', 'BH_55D', 'BH_55E', 'BH_55F', 'BH_55G', 'BH_55H', 'BH_55I', 'BH_55J', 'BH_55K', 'DEM_10', 'MHDVMHI', 'ANXDVGAD', 'ANXDVSEV', 'AGEGR_10', 'PCSIZMIZ', 'PLM_30', 'PLM_40', 'PPROV', 'PVISMIN', 'PAGEGR']\n",
        "\n",
        "\n",
        "#pd.set_option(\"display.max_columns\", None)\n",
        "#df = pd.get_dummies(df, columns=dummies_columns, drop_first=True)\n",
        "#df\n",
        "#sns.heatmap(df.corr())\n",
        "\n",
        "experimento = setup(\n",
        "    data=base_treino,\n",
        "    target='ANXDVGAC',\n",
        "    categorical_features=categoricas,\n",
        "    session_id=42,\n",
        "    normalize=True,\n",
        "    remove_outliers=True,\n",
        "    use_gpu=True,\n",
        "    train_size=0.7,\n",
        "    fold=10,\n",
        "    n_jobs=-1,\n",
        "    log_experiment=True,\n",
        "    experiment_name='COVID_19_Impacts',\n",
        "    remove_multicollinearity=True,\n",
        "    multicollinearity_threshold=0.85,\n",
        "    feature_selection=False,\n",
        "    verbose=True\n",
        ")\n",
        "\n",
        "modelos = compare_models(fold=10)"
      ],
      "metadata": {
        "id": "0zFKcmIUp5ja",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "76afea54-fde5-4f7b-911a-80379fae4623"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.\n",
            "[LightGBM] [Info] Number of positive: 1, number of negative: 1\n",
            "[LightGBM] [Info] This is the GPU trainer!!\n",
            "[LightGBM] [Info] Total Bins 0\n",
            "[LightGBM] [Info] Number of data points in the train set: 2, number of used features: 0\n",
            "[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.\n",
            "[LightGBM] [Warning] Using sparse features with CUDA is currently not supported.\n",
            "[LightGBM] [Info] Number of positive: 1, number of negative: 1\n",
            "[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.\n",
            "[LightGBM] [Info] Number of positive: 1, number of negative: 1\n",
            "[LightGBM] [Info] This is the GPU trainer!!\n",
            "[LightGBM] [Info] Total Bins 0\n",
            "[LightGBM] [Info] Number of data points in the train set: 2, number of used features: 0\n",
            "[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.\n",
            "[LightGBM] [Warning] Using sparse features with CUDA is currently not supported.\n",
            "[LightGBM] [Info] Number of positive: 1, number of negative: 1\n",
            "[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.\n",
            "[LightGBM] [Info] Number of positive: 1, number of negative: 1\n",
            "[LightGBM] [Info] This is the GPU trainer!!\n",
            "[LightGBM] [Info] Total Bins 0\n",
            "[LightGBM] [Info] Number of data points in the train set: 2, number of used features: 0\n",
            "[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.\n",
            "[LightGBM] [Warning] Using sparse features with CUDA is currently not supported.\n",
            "[LightGBM] [Info] Number of positive: 1, number of negative: 1\n",
            "[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.\n",
            "[LightGBM] [Info] Number of positive: 1, number of negative: 1\n",
            "[LightGBM] [Info] This is the GPU trainer!!\n",
            "[LightGBM] [Info] Total Bins 0\n",
            "[LightGBM] [Info] Number of data points in the train set: 2, number of used features: 0\n",
            "[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.\n",
            "[LightGBM] [Warning] Using sparse features with CUDA is currently not supported.\n",
            "[LightGBM] [Info] Number of positive: 1, number of negative: 1\n",
            "[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.\n",
            "[LightGBM] [Info] Number of positive: 1, number of negative: 1\n",
            "[LightGBM] [Info] This is the GPU trainer!!\n",
            "[LightGBM] [Info] Total Bins 0\n",
            "[LightGBM] [Info] Number of data points in the train set: 2, number of used features: 0\n",
            "[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.\n",
            "[LightGBM] [Warning] Using sparse features with CUDA is currently not supported.\n",
            "[LightGBM] [Info] Number of positive: 1, number of negative: 1\n",
            "[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.\n",
            "[LightGBM] [Info] Number of positive: 1, number of negative: 1\n",
            "[LightGBM] [Info] This is the GPU trainer!!\n",
            "[LightGBM] [Info] Total Bins 0\n",
            "[LightGBM] [Info] Number of data points in the train set: 2, number of used features: 0\n",
            "[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.\n",
            "[LightGBM] [Warning] Using sparse features with CUDA is currently not supported.\n",
            "[LightGBM] [Info] Number of positive: 1, number of negative: 1\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7ad838786aa0>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_df12e_row10_col1, #T_df12e_row16_col1, #T_df12e_row18_col1, #T_df12e_row20_col1, #T_df12e_row25_col1 {\n",
              "  background-color: lightgreen;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_df12e\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_df12e_level0_col0\" class=\"col_heading level0 col0\" >Description</th>\n",
              "      <th id=\"T_df12e_level0_col1\" class=\"col_heading level0 col1\" >Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "      <td id=\"T_df12e_row0_col0\" class=\"data row0 col0\" >Session id</td>\n",
              "      <td id=\"T_df12e_row0_col1\" class=\"data row0 col1\" >42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
              "      <td id=\"T_df12e_row1_col0\" class=\"data row1 col0\" >Target</td>\n",
              "      <td id=\"T_df12e_row1_col1\" class=\"data row1 col1\" >ANXDVGAC</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
              "      <td id=\"T_df12e_row2_col0\" class=\"data row2 col0\" >Target type</td>\n",
              "      <td id=\"T_df12e_row2_col1\" class=\"data row2 col1\" >Binary</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
              "      <td id=\"T_df12e_row3_col0\" class=\"data row3 col0\" >Target mapping</td>\n",
              "      <td id=\"T_df12e_row3_col1\" class=\"data row3 col1\" >1: 0, 2: 1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
              "      <td id=\"T_df12e_row4_col0\" class=\"data row4 col0\" >Original data shape</td>\n",
              "      <td id=\"T_df12e_row4_col1\" class=\"data row4 col1\" >(27811, 35)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
              "      <td id=\"T_df12e_row5_col0\" class=\"data row5 col0\" >Transformed data shape</td>\n",
              "      <td id=\"T_df12e_row5_col1\" class=\"data row5 col1\" >(26837, 159)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
              "      <td id=\"T_df12e_row6_col0\" class=\"data row6 col0\" >Transformed train set shape</td>\n",
              "      <td id=\"T_df12e_row6_col1\" class=\"data row6 col1\" >(18493, 159)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
              "      <td id=\"T_df12e_row7_col0\" class=\"data row7 col0\" >Transformed test set shape</td>\n",
              "      <td id=\"T_df12e_row7_col1\" class=\"data row7 col1\" >(8344, 159)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
              "      <td id=\"T_df12e_row8_col0\" class=\"data row8 col0\" >Numeric features</td>\n",
              "      <td id=\"T_df12e_row8_col1\" class=\"data row8 col1\" >1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
              "      <td id=\"T_df12e_row9_col0\" class=\"data row9 col0\" >Categorical features</td>\n",
              "      <td id=\"T_df12e_row9_col1\" class=\"data row9 col1\" >33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n",
              "      <td id=\"T_df12e_row10_col0\" class=\"data row10 col0\" >Preprocess</td>\n",
              "      <td id=\"T_df12e_row10_col1\" class=\"data row10 col1\" >True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row11\" class=\"row_heading level0 row11\" >11</th>\n",
              "      <td id=\"T_df12e_row11_col0\" class=\"data row11 col0\" >Imputation type</td>\n",
              "      <td id=\"T_df12e_row11_col1\" class=\"data row11 col1\" >simple</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row12\" class=\"row_heading level0 row12\" >12</th>\n",
              "      <td id=\"T_df12e_row12_col0\" class=\"data row12 col0\" >Numeric imputation</td>\n",
              "      <td id=\"T_df12e_row12_col1\" class=\"data row12 col1\" >mean</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row13\" class=\"row_heading level0 row13\" >13</th>\n",
              "      <td id=\"T_df12e_row13_col0\" class=\"data row13 col0\" >Categorical imputation</td>\n",
              "      <td id=\"T_df12e_row13_col1\" class=\"data row13 col1\" >mode</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row14\" class=\"row_heading level0 row14\" >14</th>\n",
              "      <td id=\"T_df12e_row14_col0\" class=\"data row14 col0\" >Maximum one-hot encoding</td>\n",
              "      <td id=\"T_df12e_row14_col1\" class=\"data row14 col1\" >25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row15\" class=\"row_heading level0 row15\" >15</th>\n",
              "      <td id=\"T_df12e_row15_col0\" class=\"data row15 col0\" >Encoding method</td>\n",
              "      <td id=\"T_df12e_row15_col1\" class=\"data row15 col1\" >None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row16\" class=\"row_heading level0 row16\" >16</th>\n",
              "      <td id=\"T_df12e_row16_col0\" class=\"data row16 col0\" >Remove multicollinearity</td>\n",
              "      <td id=\"T_df12e_row16_col1\" class=\"data row16 col1\" >True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row17\" class=\"row_heading level0 row17\" >17</th>\n",
              "      <td id=\"T_df12e_row17_col0\" class=\"data row17 col0\" >Multicollinearity threshold</td>\n",
              "      <td id=\"T_df12e_row17_col1\" class=\"data row17 col1\" >0.850000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row18\" class=\"row_heading level0 row18\" >18</th>\n",
              "      <td id=\"T_df12e_row18_col0\" class=\"data row18 col0\" >Remove outliers</td>\n",
              "      <td id=\"T_df12e_row18_col1\" class=\"data row18 col1\" >True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row19\" class=\"row_heading level0 row19\" >19</th>\n",
              "      <td id=\"T_df12e_row19_col0\" class=\"data row19 col0\" >Outliers threshold</td>\n",
              "      <td id=\"T_df12e_row19_col1\" class=\"data row19 col1\" >0.050000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row20\" class=\"row_heading level0 row20\" >20</th>\n",
              "      <td id=\"T_df12e_row20_col0\" class=\"data row20 col0\" >Normalize</td>\n",
              "      <td id=\"T_df12e_row20_col1\" class=\"data row20 col1\" >True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row21\" class=\"row_heading level0 row21\" >21</th>\n",
              "      <td id=\"T_df12e_row21_col0\" class=\"data row21 col0\" >Normalize method</td>\n",
              "      <td id=\"T_df12e_row21_col1\" class=\"data row21 col1\" >zscore</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row22\" class=\"row_heading level0 row22\" >22</th>\n",
              "      <td id=\"T_df12e_row22_col0\" class=\"data row22 col0\" >Fold Generator</td>\n",
              "      <td id=\"T_df12e_row22_col1\" class=\"data row22 col1\" >StratifiedKFold</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row23\" class=\"row_heading level0 row23\" >23</th>\n",
              "      <td id=\"T_df12e_row23_col0\" class=\"data row23 col0\" >Fold Number</td>\n",
              "      <td id=\"T_df12e_row23_col1\" class=\"data row23 col1\" >10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row24\" class=\"row_heading level0 row24\" >24</th>\n",
              "      <td id=\"T_df12e_row24_col0\" class=\"data row24 col0\" >CPU Jobs</td>\n",
              "      <td id=\"T_df12e_row24_col1\" class=\"data row24 col1\" >-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row25\" class=\"row_heading level0 row25\" >25</th>\n",
              "      <td id=\"T_df12e_row25_col0\" class=\"data row25 col0\" >Use GPU</td>\n",
              "      <td id=\"T_df12e_row25_col1\" class=\"data row25 col1\" >True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row26\" class=\"row_heading level0 row26\" >26</th>\n",
              "      <td id=\"T_df12e_row26_col0\" class=\"data row26 col0\" >Log Experiment</td>\n",
              "      <td id=\"T_df12e_row26_col1\" class=\"data row26 col1\" >MlflowLogger</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row27\" class=\"row_heading level0 row27\" >27</th>\n",
              "      <td id=\"T_df12e_row27_col0\" class=\"data row27 col0\" >Experiment Name</td>\n",
              "      <td id=\"T_df12e_row27_col1\" class=\"data row27 col1\" >COVID_19_Impacts</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_df12e_level0_row28\" class=\"row_heading level0 row28\" >28</th>\n",
              "      <td id=\"T_df12e_row28_col0\" class=\"data row28 col0\" >USI</td>\n",
              "      <td id=\"T_df12e_row28_col1\" class=\"data row28 col1\" >69c3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.\n",
            "[LightGBM] [Info] Number of positive: 1, number of negative: 1\n",
            "[LightGBM] [Info] This is the GPU trainer!!\n",
            "[LightGBM] [Info] Total Bins 0\n",
            "[LightGBM] [Info] Number of data points in the train set: 2, number of used features: 0\n",
            "[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.\n",
            "[LightGBM] [Warning] Using sparse features with CUDA is currently not supported.\n",
            "[LightGBM] [Info] Number of positive: 1, number of negative: 1\n",
            "[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.\n",
            "[LightGBM] [Info] Number of positive: 1, number of negative: 1\n",
            "[LightGBM] [Info] This is the GPU trainer!!\n",
            "[LightGBM] [Info] Total Bins 0\n",
            "[LightGBM] [Info] Number of data points in the train set: 2, number of used features: 0\n",
            "[LightGBM] [Warning] There are no meaningful features which satisfy the provided configuration. Decreasing Dataset parameters min_data_in_bin or min_data_in_leaf and re-constructing Dataset might resolve this warning.\n",
            "[LightGBM] [Warning] Using sparse features with CUDA is currently not supported.\n",
            "[LightGBM] [Info] Number of positive: 1, number of negative: 1\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'ThreadLocalVariable' object has no attribute 'copy'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-52-bcde9ea39032>\u001b[0m in \u001b[0;36m<cell line: 11>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m#sns.heatmap(df.corr())\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m experimento = setup(\n\u001b[0m\u001b[1;32m     12\u001b[0m     \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbase_treino\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0mtarget\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'ANXDVGAC'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pycaret/classification/functional.py\u001b[0m in \u001b[0;36msetup\u001b[0;34m(data, data_func, target, index, train_size, test_data, ordinal_features, numeric_features, categorical_features, date_features, text_features, ignore_features, keep_features, preprocess, create_date_columns, imputation_type, numeric_imputation, categorical_imputation, iterative_imputation_iters, numeric_iterative_imputer, categorical_iterative_imputer, text_features_method, max_encoding_ohe, encoding_method, rare_to_value, rare_value, polynomial_features, polynomial_degree, low_variance_threshold, group_features, drop_groups, remove_multicollinearity, multicollinearity_threshold, bin_numeric_features, remove_outliers, outliers_method, outliers_threshold, fix_imbalance, fix_imbalance_method, transformation, transformation_method, normalize, normalize_method, pca, pca_method, pca_components, feature_selection, feature_selection_method, feature_selection_estimator, n_features_to_select, custom_pipeline, custom_pipeline_position, data_split_shuffle, data_split_stratify, fold_strategy, fold, fold_shuffle, fold_groups, n_jobs, use_gpu, html, session_id, system_log, log_experiment, experiment_name, experiment_custom_tags, log_plots, log_profile, log_data, verbose, memory, profile, profile_kwargs)\u001b[0m\n\u001b[1;32m    593\u001b[0m     \u001b[0mexp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_EXPERIMENT_CLASS\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    594\u001b[0m     \u001b[0mset_current_experiment\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 595\u001b[0;31m     return exp.setup(\n\u001b[0m\u001b[1;32m    596\u001b[0m         \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    597\u001b[0m         \u001b[0mdata_func\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata_func\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pycaret/classification/oop.py\u001b[0m in \u001b[0;36msetup\u001b[0;34m(self, data, data_func, target, index, train_size, test_data, ordinal_features, numeric_features, categorical_features, date_features, text_features, ignore_features, keep_features, preprocess, create_date_columns, imputation_type, numeric_imputation, categorical_imputation, iterative_imputation_iters, numeric_iterative_imputer, categorical_iterative_imputer, text_features_method, max_encoding_ohe, encoding_method, rare_to_value, rare_value, polynomial_features, polynomial_degree, low_variance_threshold, group_features, drop_groups, remove_multicollinearity, multicollinearity_threshold, bin_numeric_features, remove_outliers, outliers_method, outliers_threshold, fix_imbalance, fix_imbalance_method, transformation, transformation_method, normalize, normalize_method, pca, pca_method, pca_components, feature_selection, feature_selection_method, feature_selection_estimator, n_features_to_select, custom_pipeline, custom_pipeline_position, data_split_shuffle, data_split_stratify, fold_strategy, fold, fold_shuffle, fold_groups, n_jobs, use_gpu, html, session_id, system_log, log_experiment, experiment_name, experiment_custom_tags, log_plots, log_profile, log_data, engine, verbose, memory, profile, profile_kwargs)\u001b[0m\n\u001b[1;32m   1012\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1013\u001b[0m         \u001b[0mruntime\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mruntime_start\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1014\u001b[0;31m         self._set_up_logging(\n\u001b[0m\u001b[1;32m   1015\u001b[0m             \u001b[0mruntime\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1016\u001b[0m             \u001b[0mlog_data\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pycaret/internal/pycaret_experiment/supervised_experiment.py\u001b[0m in \u001b[0;36m_set_up_logging\u001b[0;34m(self, runtime, log_data, log_profile, experiment_custom_tags)\u001b[0m\n\u001b[1;32m    266\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    267\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlogging_param\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 268\u001b[0;31m             self.logging_param.log_experiment(\n\u001b[0m\u001b[1;32m    269\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    270\u001b[0m                 \u001b[0mlog_profile\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pycaret/loggers/dashboard_logger.py\u001b[0m in \u001b[0;36mlog_experiment\u001b[0;34m(self, experiment, log_profile, log_data, experiment_custom_tags, runtime)\u001b[0m\n\u001b[1;32m    206\u001b[0m         \u001b[0mparams\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkdict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Value\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mlogger\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloggers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 208\u001b[0;31m             logger.init_experiment(\n\u001b[0m\u001b[1;32m    209\u001b[0m                 \u001b[0mexperiment\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexp_name_log\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34mf\"{SETUP_TAG} {experiment.USI}\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msetup\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m             )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pycaret/loggers/mlflow_logger.py\u001b[0m in \u001b[0;36minit_experiment\u001b[0;34m(self, exp_name_log, full_name, setup)\u001b[0m\n\u001b[1;32m     55\u001b[0m             \u001b[0;31m# If we are starting a new experiment with setup,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m             \u001b[0;31m# make sure we do not nest it in any other run\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m             \u001b[0;32mwith\u001b[0m \u001b[0mclean_active_mlflow_run\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m                 \u001b[0mrun\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmlflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_run\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfull_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/contextlib.py\u001b[0m in \u001b[0;36m__enter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0;32mdel\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 135\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    136\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    137\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"generator didn't yield\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pycaret/loggers/mlflow_logger.py\u001b[0m in \u001b[0;36mclean_active_mlflow_run\u001b[0;34m()\u001b[0m\n\u001b[1;32m     31\u001b[0m     \u001b[0;34m\"\"\"Trick MLFLow into thinking there are no active runs.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m     \u001b[0;32mglobal\u001b[0m \u001b[0m_active_run_stack\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m     \u001b[0mold_run_stack\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_active_run_stack\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m     \u001b[0m_active_run_stack\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclear\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m     \u001b[0;32myield\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'ThreadLocalVariable' object has no attribute 'copy'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "id": "tEa9LFADcTOw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "modelo = create_model('lr')"
      ],
      "metadata": {
        "id": "Je1J12z4fZL8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from pycaret.classification import predict_model\n",
        "\n",
        "previsoes_et = predict_model(modelo, data=base_teste)"
      ],
      "metadata": {
        "id": "CKgFIVe7Yz5I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from pycaret.classification import plot_model, evaluate_model\n",
        "\n",
        "evaluate_model(modelo)"
      ],
      "metadata": {
        "id": "LmLnqVpJY10i"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#sns.scatterplot(x='ANXDVGAC', y='MHDVMHI', data=df)"
      ],
      "metadata": {
        "id": "88mfJYbjWUcD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#df.isna().sum()"
      ],
      "metadata": {
        "id": "YvBprhtnp9fS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"plt.figure()\n",
        "plt.subplot()\n",
        "data = df['MH_15A']\n",
        "#trf = FunctionTransformer(func=np.log1p)\n",
        "#data = trf.fit_transform(data)\n",
        "sns.distplot(data)\n",
        "plt.show()\"\"\""
      ],
      "metadata": {
        "id": "1O4lrQ7vzPZf"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}